//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WorkingHours.Model
{
    using System;
    using System.Collections.Generic;
    
    public partial class TimeMonitoring
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public TimeMonitoring()
        {
            this.Breaks = new HashSet<Break>();
        }
    
        public int IdTimeMonitoring { get; set; }
        public int IdUser { get; set; }
        public System.TimeSpan LoginTime { get; set; }
        public Nullable<System.TimeSpan> LogoutTime { get; set; }
        public System.DateTime WorkingDay { get; set; }
        public Nullable<int> IdWorkHistory { get; set; }
    
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Break> Breaks { get; set; }
        public virtual User User { get; set; }
        public virtual WorkHistory WorkHistory { get; set; }

        public string Date
        {
            get { return WorkingDay.ToString("dd.MM.yyyy"); }
            set { }
        }

        public string Login
        {
            get 
            {
                return string.Format("{0:D2}:{1:D2}", LoginTime.Hours, LoginTime.Minutes);
            }
            set { }
        }

        public string Logout
        {
            get
            {
                if (LogoutTime != null)
                    return string.Format("{0:D2}:{1:D2}", LogoutTime.Value.Hours, LogoutTime.Value.Minutes);
                else
                    return "---";
            }
            set { }
        }

        public string TBreaks
        {
            get 
            {
                return Breaks.Count.ToString();
            }
            set { }
        }

        public string TotalHours
        {
            get 
            {
                double totalMinutes = (LoginTime - LogoutTime.Value).TotalMinutes;
                foreach (Break b in Breaks)
                {
                    if (b.BreakCheck)
                    {
                        totalMinutes -= b.Duration;
                    }
                }
                TimeSpan t = TimeSpan.FromMinutes(totalMinutes);
                return string.Format("{0:D2}:{1:D2}:", t.Hours, t.Minutes);
            }
            set { }
        }
    }
}
